Тест для smartmerch.it:
 - реализован в Google Colaboratory
 - Python 3.8
 - sklearn 0.24
 - tensorflow 2.

Данные на вход: "задание sm 20210309.zip"

задание : задание.doc

Анализ данных и обучение моделей:
     - Эксперимент.ipynb
     - сохраненная модель siam_net.h5
 
Запускаемый модуль: 
    Рабочий вариант.ipynb
    - открыть из git или скопировать и открыть на Google Drive в Colaboratory
    - модель siam_net.h5

Получить репозирорий:
!git clone https://github.com/mkorlyakova/test_pallet.git  


Исследовательская часть:

Результат анализа данных:
  - картинок мало (5 штук)
  - размеры картинок разные :
  - размер по У: минимальный = 4278 : максимальный = 4553
  - размер по х: минимальный = 3196 : максимальный = 4432
  - число каналов: 3 (все цветные)
  - видимых промахов детектора нет
  - число объектов в кадре : от 54 до 89
  - очевидно не все целевые объекты найдены (есть пропущеные объекты на полках)
  - визуально качество фоток близкое
  - каритнки ректифицированы

Задача:

собрать в группы на полке

Особенности:

  - не все полки - полки (есть ряды на крючках)
  - не всегда полка на всю картинку по ширине (бывает 2 и более полок по ширине)
  - детектированные объекты на полках стоят более ли менее плотно
  - данных для обучения мало

Гипотезы для обработки:

1 - проверить кластеризацию по метрике

2 - построить вложение на сиамской сети

Результат 1

- использован DBSCAN (реализуем вариант обучения без разметки) с метриками IoU + Euqlid + Manhatten 
- получена рабочая разметка: некоторые области находит очень хорошо, короткие полки видит хуже
- есть подозрение, что пожно использовать информацию о самой картинке для этого построим нейронную сеть. 

Результат 2

- нейронная сеть в схеме Сиамской сети с потерями Контрастив и размером вложения 10 (https://www.pyimagesearch.com/2021/01/18/contrastive-loss-for-siamese-networks-with-keras-and-tensorflow/).
- у сети 2 потока входов : 
    - вход векторный (центроид рамки, координаты углов рамки, размеры рамки), 
    - вход 3D - область изображения вокруг центроида рамки размером 64х64 пикселя
    - функция потерь - Контрастивная
    - оптимизатор - Adam
    - обучена на 4-х первых картинках (их рамках из них в качестве примеров)
    - сеть генерит векторый выход ( размер выхода == размер вложения (эмбединга), который построили)
 - результаты работы сети подаем в DBSCAN в виде матрицы расстояний между рамками на одной фотографии
    - протестирована на 5-й картинке 
    - видит ряды на полках 
    - пропускае короткие куски полок по бокам
 

Реализация тестового кода для модели:
 - загружаем среду и данные
 - описание функций для работы
 - загружаем модель
 - запускам модель на все примеры: отделен тестовый пример, на котором не обучали сеть
